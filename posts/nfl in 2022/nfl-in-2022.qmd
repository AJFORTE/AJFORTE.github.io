---
title: "NFL in 2022"
author: "AJ Forte"
date: "2023-12-11"
categories: [Sports, code, data analysis]
image: "ai_nfl.png"

execute: 
  warning: false
  message: false
  
toc: true
---

The following is the data.frame for Question 2.

```{r}
NFL2022_stuffs <- read.csv('https://bcdanl.github.io/data/NFL2022_stuffs.csv')
```

```{r}
rmarkdown::paged_table(NFL2022_stuffs) 
```

NFL2022_stuffs is the data.frame that contains information about NFL games in year 2022, in which the unit of observation is a single play for each drive in a NFL game.

# Variable description

 - play_id: Numeric play identifier that when used with game_id and drive provides the unique
 identifier for a single play

 - game_id: Ten digit identifier for NFL game.

 - drive: Numeric drive number in the game.

 - week: Season week.

 - posteam: String abbreviation for the team with possession.

 - qtr: Quarter of the game (5 is overtime).

 - half_seconds_remaining: Numeric seconds remaining in the half.

 - down: The down for the given play.
    - Basically you get four attempts (aka downs) to move the ball 10 yards (by either running with
    it or passing it).
    - If you make 10 yards then you get another set of four downs.

 - pass: Binary indicator if the play was a pass play.

 - wp: Estimated winning probability for the posteam given the current situation at the start of the
 given play.

# Q&A

## Q1.

- In data.frame, NFL2022_stuffs, remove observations for which values of posteam is missing.

Answer:

```{r}
NFL2022_stuffs <- na.omit(NFL2022_stuffs, cols = "posteam")
```

This will remove rows where the value of posteam is missing. Make sure to assign the result back to the same variable (NFL2022_stuffs) if you want to update the original data frame.

Now, NFL2022_stuffs will only contain observations where the values of posteam are not missing.


## Q2.

- Summarize the mean value of pass for each posteam when all the following conditions hold:
  1. wp is greater than 20% and less than 75%;
  2. down is less than or equal to 2; and
  3. half_seconds_remaining is greater than 120.
  
Answer:

```{r}
Q2 <- NFL2022_stuffs %>%
  filter(wp > 0.2 & wp < 0.75 & down <= 2 & half_seconds_remaining > 120) %>% 
  group_by(posteam) %>% 
  summarise(mean_pass = mean(pass, na.rm = TRUE))

print(Q2)
```

This code filters the data based on the specified conditions and then calculates the mean value of pass for each posteam. The result is stored in the result_summary data frame.


## Q3.

- Provide both (1) a ggplot code with geom_point() using the resulting data.frame in Q2b and (2) a
simple comments to describe the mean value of pass for each posteam.
    - In the ggplot, reorder the posteam categories based on the mean value of pass in ascending or
    in descending order.

Answer:

```{r}
ggplot(result_summary, aes(x = mean_pass, y = reorder(posteam, mean_pass))) +
  geom_point() +
  labs(title = 'Mean Value of pass for Each posteam',
       x = 'Percentage of Pass Plays',
       y = 'Team with Possession')
```

This ggplot code creates a scatter plot using geom_point() to visualize the mean value of pass for
each posteam. The posteam categories are reordered based on the ascending mean value of pass for
better visualization.


## Q4.

Consider the following data.frame, NFL2022_epa:

Answer: 

```{r}
NFL2022_epa <- read_csv('https://bcdanl.github.io/data/NFL2022_epa.csv')
```
```{r}
rmarkdown::paged_table(NFL2022_epa) 
```

- Variable description for NFL2022_epa

  - play_id: Numeric play identifier that when used with game_id and drive provides the unique
  identifier for a single play

  - game_id: Ten digit identifier for NFL game.

  - drive: Numeric drive number in the game.

  - posteam: String abbreviation for the team with possession.

  - passer: Name of the player who passed a ball to a receiver by initially taking a three-step drop
  and backpedaling into the pocket to make a pass. (Mostly, they are quarterbacks)

  - receiver: Name of the receiver.

  - epa: Expected points added (EPA) by the posteam for the given play.


- Create the data.frame, NFL2022_stuffs_EPA, that includes

  - All the variables in the data.frame, NFL2022_stuffs;
  - The variables, passer, receiver, and epa, from the data.frame, NFL2022_epa. by joining the two
  data.frames.
- In the resulting data.frame, NFL2022_stuffs_EPA, remove observations with NA in passer.

Answer:
```{r}
NFL2022_stuffs_EPA <- left_join(NFL2022_stuffs, NFL2022_epa[, c("play_id", "game_id", "drive", "posteam", "passer", "receiver", "epa")], by = c("play_id", "game_id", "drive"))

NFL2022_stuffs_EPA <- filter(NFL2022_stuffs_EPA, !is.na(passer))
```

This code performs a left join between NFL2022_stuffs and NFL2022_epa, including only the specified
variables (play_id, game_id, drive, posteam, passer, receiver, epa). Then, it filters out
observations where passer is NA using the filter function.


## Q5.

- Provide both (1) a single ggplot and (2) a simple comment to describe the NFL weekly trend of
weekly mean value of epa for each of the following two passers,

  - "J.Allen"
  - "P.Mahomes"


Answer:
```{r}
mean_epa <- NFL2022_stuffs_EPA %>%
  filter(passer %in% c("J.Allen", "P.Mahomes")) %>%
  group_by(passer, week) %>%
  summarise(mean_epa = mean(epa, na.rm = TRUE)) %>%
  filter(week %% 2 == 1)


ggplot(mean_epa, aes(x = week, y = mean_epa, group = passer)) +
  geom_line(aes(color = passer), size = 1) +
  geom_point(aes(color = passer), size = 3) +
  labs(title = 'Mean EPA for Every Other Week - Josh Allen and Patrick Mahomes',
       x = 'Week',
       y = 'Mean EPA',
       color = 'Passer') +
  scale_y_continuous(limits = c(-0.25, 1), breaks = seq(-0.25, 1, 0.25)) +
  scale_color_manual(values = c("J.Allen" = "green", "P.Mahomes" = "orange")) +
  theme_minimal()
```

This code calculates the mean EPA for every other week for both Josh Allen and Patrick Mahomes and then creates a plot with connecting dots and lines for these mean values.


## Q6.

- Calculate the difference between the mean value of epa for "J.Allen" the mean value of epa for
"P.Mahomes" for each value of week.

Answer:
```{r}
epa_difference <- NFL2022_stuffs_EPA %>%
  filter(passer %in% c("J.Allen", "P.Mahomes")) %>%
  group_by(week, passer) %>%
  summarise(mean_epa = mean(epa, na.rm = TRUE)) %>%
  spread(passer, mean_epa) %>%
  mutate(epa_difference = J.Allen - P.Mahomes)

print(epa_difference)
```

This code calculates the mean value of epa for each player for each value of week, then spreads the
data to have separate columns for "J.Allen" and "P.Mahomes." Finally, it calculates the difference
between the mean values for the two players for each week and stores the result in the
epa_difference data frame.


## Q7.

- Summarize the resulting data.frame in Q2d, with the following four variables:

  - posteam: String abbreviation for the team with possession.

  - passer: Name of the player who passed a ball to a receiver by initially taking a three-step
  drop, and backpedaling into the pocket to make a pass. (Mostly, they are quarterbacks.)

  - mean_epa: Mean value of epa in 2022 for each passer

  - n_pass: Number of observations for each passer

-Then find the top 10 NFL passers in 2022 in terms of the mean value of epa, conditioning that
n_pass must be greater than or equal to the third quantile level of n_pass.


Answer:
```{r}
summary_df <- NFL2022_stuffs_EPA %>%
  group_by(posteam.y, passer) %>%
  summarise(mean_epa = mean(epa, na.rm = TRUE),
            n_pass = n())

quantile_threshold <- quantile(summary_df$n_pass, 0.75)

top_passers <- summary_df %>%
  filter(n_pass >= quantile_threshold) %>%
  arrange(desc(mean_epa)) %>%
  slice_head(n = 10)

print(summary_df)
print(top_passers)
```

This code first summarizes the data by calculating the mean value of epa and the number of
observations (n_pass) for each posteam and passer. Then, it finds the third quantile level of n_pass
and filters the data to include only passers with observations greater than or equal to the third
quantile level. Finally, it arranges the data by descending mean value of epa and selects the top 10
passers.


